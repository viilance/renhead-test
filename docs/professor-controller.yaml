openapi: "3.0.3"
info:
  title: "Professor API"
  version: "1.0.0"
servers:
  - url: http://localhost/api
paths:
  /professors:
    get:
      summary: List all professors
      description: Returns a list of all professors.
      responses:
        200:
          description: A list of professors
          content:
            application/json:
              schema:
                type: object
                properties:
                  professors:
                    type: array
                    items:
                      $ref: '#/components/schemas/Professor'
    post:
      summary: Create a new professor
      description: Creates a new professor and returns the created professor.
      requestBody:
        description: The professor to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProfessorRequest'
      responses:
        200:
          description: The created professor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Professor'
  /professors/{id}:
    get:
      summary: Get a professor by ID
      description: Returns a single professor identified by its ID.
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the professor to retrieve
          schema:
            type: string
      responses:
        200:
          description: The requested professor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Professor'
        404:
          $ref: '#/components/responses/NotFoundResponse'
    patch:
      summary: Update a professor
      description: Updates an existing professor and returns the updated professor.
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the professor to update
          schema:
            type: string
      requestBody:
        description: The professor to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfessorRequest'
      responses:
        200:
          description: The updated professor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Professor'
        404:
          $ref: '#/components/responses/NotFoundResponse'
    delete:
      summary: Delete a professor
      description: Deletes a professor identified by its ID.
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the professor to delete
          schema:
            type: string
      responses:
        204:
          description: The professor was deleted successfully
        404:
          $ref: '#/components/responses/NotFoundResponse'
components:
  schemas:
    Professor:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 2
        total_available_hours:
          type: number
          format: float
          example: 25.0
        payroll_per_hour:
          type: number
          format: float
          example: 50.0
        total_projects:
          type: integer
          example: 10
        office_number:
          type: integer
          example: 123
        created_at:
          type: string
          format: date-time
          example: "2022-03-21T09:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2022-03-21T09:00:00Z"
        deleted_at:
          type: string
          format: date-time
          example: "2022-03-21T09:00:00Z"
    CreateProfessorRequest:
      type: object
      required:
        - first_name
        - last_name
        - email
        - password
        - total_available_hours
        - payroll_per_hour
      properties:
        first_name:
          type: string
          example: John
        last_name:
          type: string
          example: Doe
        email:
          type: string
          format: email
          example: john.doe@example.com
        password:
          type: string
          example: password123
        total_available_hours:
          type: number
          format: float
          example: 25.0
        payroll_per_hour:
          type: number
          format: float
          example: 50.0
        total_projects:
          type: integer
          example: 10
        office_number:
          type: integer
          example: 123
    UpdateProfessorRequest:
      type: object
      properties:
        first_name:
          type: string
          example: John
        last_name:
          type: string
          example: Doe
        email:
          type: string
          format: email
          example: john.doe@example.com
        password:
          type: string
          example: password123
        total_available_hours:
          type: number
          format: float
          example: 30.0
        payroll_per_hour:
          type: number
          format: float
          example: 60.0
        total_projects:
          type: integer
          example: 15
        office_number:
          type: integer
          example: 123
  responses:
    NotFoundResponse:
      description: The requested resource was not found
